generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  role     Role
  image    String?

  logActivities LogActivity[]

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  OWNER
  MANAGER_OPERATIONAL
  CASHIER
}

// PRODUCT

model Stock {
  id           String  @id @default(uuid())
  name         String
  quantity     Float   @default(0)
  unit         String
  image        String?
  averagePrice Float   @default(0)

  recipes  Recipe[]
  outcomes Outcome[]
  defects  Defect[]

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductCategory {
  id   String @id @default(uuid())
  name String

  products Product[]

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id          String  @id @default(uuid())
  name        String
  price       Float
  description String? @db.Text()
  image       String?
  cogs        Float   @default(0)

  productCategoryId String
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)

  recipes    Recipe[]
  orderItems OrderItem[]

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Defect {
  id     String @id @default(uuid())
  amount Float
  reason String

  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Recipe {
  id     String @id @default(uuid())
  amount Float
  price  Float

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  stockId   String
  stock     Stock   @relation(fields: [stockId], references: [id], onDelete: Cascade)

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id       String        @id @default(uuid())
  merchant Merchant
  method   PaymentMethod
  total    Float         @default(0)
  business Business      @default(Haykatuju)

  orderItems OrderItem[]

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Merchant {
  GrabFood
  GoFood
  ShopeeFood
}

enum PaymentMethod {
  Cash
  QRIS
  Transfer
  Online
}

model OrderItem {
  id          String  @id @default(uuid())
  name        String
  amount      Float
  price       Float
  description String? @db.Text()

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Outcome {
  id          String        @id @default(uuid())
  amount      Float
  price       Float // per satuan
  method      PaymentMethod
  category    String // nasgor / dendeng dsb
  description String?       @db.Text()
  adminFee    Float         @default(0)

  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// LOG ACTIVITY
model LogActivity {
  id             String  @id @default(uuid())
  description    String  @db.Text()
  type           LogType
  referenceId    String
  referenceModel String
  before         Json?
  detail         Json    @default("{}")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum LogType {
  CREATE
  UPDATE
  DELETE
}

enum Business {
  Haykatuju
  Majapahit
}

// OPERATIONAL

enum TransactionType {
  Income
  Expense
}

enum OperationalType {
  Salary
  Rent
  Utility
  Marketing
  Transaction
}

model Operational {
  id          String          @id @default(uuid())
  type        OperationalType
  description String?         @db.Text()
  note        String?         @db.Text()
  amount      Float
  transaction TransactionType

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// CAPEX

enum CapitalType {
  Asset
  RnD
  Legal
  Transaction
}

model Capital {
  id          String          @id @default(uuid())
  type        CapitalType
  description String?         @db.Text()
  note        String?         @db.Text()
  amount      Float
  transaction TransactionType

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// FINANCE

enum FinanceType {
  Loan
  Investment
  Dividend
  Transaction
}

model Finance {
  id          String          @id @default(uuid())
  type        FinanceType
  description String?         @db.Text()
  note        String?         @db.Text()
  amount      Float
  transaction TransactionType

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
